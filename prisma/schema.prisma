// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// oauth related tables

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Barrel        Barrel[]
  isAdmin       Boolean   @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Barrel {
  id               String            @id @default(cuid())
  slug             String            @unique
  userId           String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  barrelDetails    BarrelDetails?
  staveCurveConfig StaveCurveConfig?
  user             User              @relation(fields: [userId], references: [id])
}

model BarrelDetails {
  id                   String  @id @default(cuid())
  name                 String
  notes                String
  height               Float
  bottomDiameter       Float
  topDiameter          Float
  staveLength          Float
  angle                Float
  staveBottomThickness Float
  staveTopThickness    Float
  bottomThickness      Float
  bottomMargin         Float
  isPublic             Boolean @default(true)
  isExample            Boolean @default(false)

  barrel   Barrel @relation(fields: [barrelId], references: [id], onDelete: Cascade)
  barrelId String @unique
}

model StaveCurveConfig {
  id               String                    @id @default(cuid())
  defaultPaperType String // A4 or A3
  configDetails    StaveCurveConfigDetails[] // Assuming StaveCurveConfigDetails is another model
  barrel           Barrel                    @relation(fields: [barrelId], references: [id], onDelete: Cascade)
  barrelId         String                    @unique
}

model StaveCurveConfigDetails {
  id                 String           @id @default(cuid())
  paperType          String // A4 or A3
  rotatePaper        Boolean
  posX               Float
  posY               Float
  innerTopX          Float
  innerTopY          Float
  outerTopX          Float
  outerTopY          Float
  innerBottomX       Float
  innerBottomY       Float
  outerBottomX       Float
  outerBottomY       Float
  rectX              Float
  rectY              Float
  rectWidth          Float
  rectHeight         Float
  StaveCurveConfig   StaveCurveConfig @relation(fields: [staveCurveConfigId], references: [id], onDelete: Cascade)
  staveCurveConfigId String
}

//  const defaultStaveCurveConfig = {
//     rotate: false,
//     group: { x: 30, y: 20 },
//     innerTop: { x: 20.5, y: 20 },
//     outerTop: { x: 20.5, y: 60 },
//     innerBottom: { x: 20.5, y: 170 },
//     outerBottom: { x: 20.5, y: 210 },
//     rect: { x: 0, y: 0, width: 20, height: 250 },
//   }

//         innerTop: { x: number, y: number },
//         outerTop: { x: number, y: number },
//         innerBottom: { x: number, y: number },
//         outerBottom: { x: number, y: number },
//         rect: { x: number, y: number, width: number, height: number }
//}

// export interface ToolConfig {
//   staveCurve: {
//     defaultPaperType: string, // A3 or A4
//     config: {
//       [key: string]: { // A3 or A4
//         rotate: boolean
//         group: { x: number, y: number },
//         innerTop: { x: number, y: number },
//         outerTop: { x: number, y: number },
//         innerBottom: { x: number, y: number },
//         outerBottom: { x: number, y: number },
//         rect: { x: number, y: number, width: number, height: number }
//       }
//     },
//   }
// }

//  from DB
// export type Barrel = {
//   "id": number,
//   "name": string,
//   "notes": string,
//   "height": number,
//   "bottomDiameter": number,
//   "topDiameter": number,
//   "staveLength": number,
//   "angle": number,
//   "staveBottomThickness": number,
//   "staveTopThickness": number,
//   "bottomThickness": number,
//   "bottomMargin": number,
//   "userId": number,
//   "isPublic": boolean,
//   "isExample": boolean,
//   "createdAt": number,
//   "lastUpdated": number
// }

// 
// model Topic {
// id          String @id @default(cuid())
// slug        String @unique
// description String
// posts       Post[]
// 
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
// }
// 
// model Post {
// id      String @id @default(cuid())
// title   String
// content String
// userId  String
// topicId String
// 
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
// 
// user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
// topic    Topic     @relation(fields: [topicId], references: [id])
// comments Comment[]
// }
// 
// model Comment {
// id       String  @id @default(cuid())
// content  String
// postId   String
// userId   String
// parentId String?
// 
// createdAt DateTime @default(now())
// updatedAt DateTime @updatedAt
// 
// parent   Comment?  @relation("Comments", fields: [parentId], references: [id], onDelete: Cascade)
// post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
// user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
// children Comment[] @relation("Comments")
// }
// 
